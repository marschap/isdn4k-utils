#
# ipppd makefile for Linux
# $Id: Makefile.in,v 1.7 1998/03/15 22:34:57 tsbogend Exp $
#

HAVE_LIBDES   := @HAVE_LIBDES@
HAVE_LIBCRYPT := @HAVE_LIBCRYPT@
HAVE_SHADOW_H := @HAVE_SHADOW_H@
SBINDIR       := @CONFIG_SBINDIR@
MANDIR        := @CONFIG_MANDIR@
CC            := @CC@
INSTALL       := @INSTALL@
INSTALL_DIR   := $(INSTALL) -m 0755 -o 0 -g 0 -d
INSTALL_SBIN  := $(INSTALL) -m 0700 -o 0 -g 0
INSTALL_BIN   := $(INSTALL) -m 0755 -o 0 -g 0
INSTALL_DATA  := $(INSTALL) -m 0644 -o 0 -g 0

ifeq (@CONFIG_IPPPD_MSCHAP@,y)
USE_MSCHAP    := 1
endif
ifeq ($(CONFIG_IPPPD_RADIUS),y)
RADIUS :=1
endif


PPPDSRCS = main.c magic.c fsm.c lcp.c ipcp.c upap.c chap.c md5.c ccp.c \
	   ipxcp.c auth.c options.c sys-linux.c cbcp.c
HEADERS =  callout.h pathnames.h patchlevel.h chap.h md5.h \
	   ipxcp.h cbcp.h
MANPAGES = ipppd.8
PPPDOBJS = main.o magic.o fsm.o lcp.o ipcp.o upap.o chap.o md5.o ccp.o \
		auth.o options.o sys-linux.o cbcp.o ipxcp.o

ifdef CONFIG_RADIUS_WTMP_LOGGING
CFLAGS  += -DRADIUS_WTMP_LOGGING
endif

all: ipppd

%.man: %.8
	cp $< $@

install-man: $(MANPAGES)
	for i in $(MANPAGES) ; do \
		MANSECT=`echo $$i | cut -d. -f2` ;\
		$(INSTALL_DIR) $(MANDIR)/man$$MANSECT ;\
		$(INSTALL_DATA) $$i $(MANDIR)/man$$MANSECT/$$i ;\
	done

uninstall-man:
	for i in $(MANPAGES) ; do \
		MANSECT=`echo $$i | cut -d. -f2` ;\
		rm -f $(MANDIR)/man$$MANSECT/$$i ;\
	done

uninstall: uninstall-man
	rm -f $(SBINDIR)/ipppd

install: ipppd install-man
	$(INSTALL_DIR) $(SBINDIR)
	$(INSTALL_SBIN) ipppd $(SBINDIR)/ipppd

ifeq (.depend,$(wildcard .depend))
include .depend
HEADERS := $(HEADERS) .depend
endif

DEBUG_FLAGS   = @CONFIG_IPPPD_DEBUGFLAGS@
COMPILE_FLAGS = 
COPTS         = -I@CONFIG_KERNELDIR@/include
CFLAGS        = -O2 -fomit-frame-pointer -Wall
VER           = 2.2.0

# it's a hack
ifeq ($(HAVE_LIBCRYPT),1)
LIBS        = -lcrypt -lutil
endif


SOURCE = RELNOTES configure *.in $(PPPDSRCS) $(HEADERS) $(MANPAGES)

MSG    = ''
ifdef USE_MSCHAP
	ifeq ($(HAVE_LIBDES),1)
		PPPDSRCS += md4.c chap_ms.c
		PPPDOBJS += md4.o chap_ms.o
		HEADERS  += md4.h chap_ms.h
		COPTS    += -DUSE_MSCHAP
		LIBS     += -ldes
	else
		MSG = '\n\nLibrary libdes not found, USE_MSCHAP disabled\n\n'
	endif
endif

ifdef RADIUS
       CFLAGS   += -DRADIUS -I/usr/local/radius/src
       CFLAGS   += -D_PATH_ETC_RADIUSCLIENT_CONF=\"/usr/local/radius\"
       LIBS     += -L/usr/local/lib -lradclient
       PPPDOBJS += radius.o
endif

ifdef RADIUS_WTMP_LOGGING
       CFLAGS   += -DRADIUS_WTMP_LOGGING
endif

ifdef OPTIONS_TTY_FIRST
       CFLAGS   += -DOPTIONS_TTY_FIRST
endif

ifeq ($(HAVE_SHADOW_H),1)
PPPDOBJS += isexpired.o
PPPDSRCS += isexpired.c
endif

%.8: %.man
	cp $< $@

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

#
# Makefile in depencies forces rebuild after running
# configure.
#
%.o: %.c Makefile
	$(CC) $(CFLAGS) $(COPTS) $(DEBUG_FLAGS) $(COMPILE_FLAGS) -c -o $@ $<

ipppd: $(PPPDOBJS)
	$(CC) $(CFLAGS) -o ipppd $(PPPDOBJS) $(LIBS)
	@echo -n $(MSG)

ipppd.tar: $(SOURCE)
	tar -cvf ipppd.tar $(SOURCE)

ipppd.tar.gz: ipppd.tar
	gzip ipppd.tar

clean:
	rm -f $(PPPDOBJS) ipppd *~ #* core

distclean: clean
	rm -f config.h config.status config.cache config.log *.man *.8 pathnames.h Makefile

depend:
	$(CPP) -M $(CFLAGS) $(COPTS) $(DEBUG_FLAGS) $(COMPILE_FLAGS) $(PPPDSRCS) >.depend
